---
title: "Matrizes"
number-sections: true
lang: pt-BR
---


## Como definir matrizes

Vamos usar a linguagem [Python](https://www.python.org/) para resolver
alguns problemas com matrizes.

Sejam\
$$
A = \begin{pmatrix} 1 & -1 & -2 \\ 0 & 3 & -1 \\ -1 & 0 & -2
\end{pmatrix},\quad
B = \begin{pmatrix} 2 & 2 \\ 0 & -2 \\ -2 & 2 \end{pmatrix}
$$
e
$$
b=\begin{pmatrix} 2 \\ -3 \\ 4 \end{pmatrix}
$$
Estas matrizes podemos definir em Python pelas seguintes instruções.


```python
from sympy import Matrix

A = Matrix( [[1,-1,-2],[0,3,-1],[-1,0,-2]])
B = Matrix( [[2,2],[0,-2],[-2,2]] )
b = Matrix( [[2],[-3],[4]])
```


```python
A
```




$\displaystyle \left[\begin{matrix}1 & -1 & -2\\0 & 3 & -1\\-1 & 0 & -2\end{matrix}\right]$




```python
B
```




$\displaystyle \left[\begin{matrix}2 & 2\\0 & -2\\-2 & 2\end{matrix}\right]$




```python
b
```




$\displaystyle \left[\begin{matrix}2\\-3\\4\end{matrix}\right]$



## Operações com matrizes

As operações entre matrizes, podem ser feitas usando os símbolos $+$ (soma), $-$ (diferença), $*$ (produto entre matrizes, ou múltiplo escalar), e `**k` (potência). O inverso de uma matriz $A$ pode ser calculado por teclar `A**-1`.

Veja os seguintes exemplos e explique porque os sistema dá erros em alguns casos.


```python
A*B
```




$\displaystyle \left[\begin{matrix}6 & 0\\2 & -8\\2 & -6\end{matrix}\right]$




```python
B*A
```


    ---------------------------------------------------------------------------

    ShapeError                                Traceback (most recent call last)

    /tmp/ipykernel_435264/3451148411.py in <module>
    ----> 1 B*A
    

    /usr/lib/python3/dist-packages/sympy/core/decorators.py in binary_op_wrapper(self, other)
        134                     if f is not None:
        135                         return f(self)
    --> 136             return func(self, other)
        137         return binary_op_wrapper
        138     return priority_decorator


    /usr/lib/python3/dist-packages/sympy/matrices/common.py in __mul__(self, other)
       2761         """
       2762 
    -> 2763         return self.multiply(other)
       2764 
       2765     def multiply(self, other, dotprodsimp=None):


    /usr/lib/python3/dist-packages/sympy/matrices/common.py in multiply(self, other, dotprodsimp)
       2783              getattr(other, 'is_MatrixLike', True))):
       2784             if self.shape[1] != other.shape[0]:
    -> 2785                 raise ShapeError("Matrix size mismatch: %s * %s." % (
       2786                     self.shape, other.shape))
       2787 


    ShapeError: Matrix size mismatch: (3, 2) * (3, 3).



```python
A+B
```


    ---------------------------------------------------------------------------

    ShapeError                                Traceback (most recent call last)

    /tmp/ipykernel_435264/3267467007.py in <module>
    ----> 1 A+B
    

    /usr/lib/python3/dist-packages/sympy/core/decorators.py in binary_op_wrapper(self, other)
        134                     if f is not None:
        135                         return f(self)
    --> 136             return func(self, other)
        137         return binary_op_wrapper
        138     return priority_decorator


    /usr/lib/python3/dist-packages/sympy/matrices/common.py in __add__(self, other)
       2701         if hasattr(other, 'shape'):
       2702             if self.shape != other.shape:
    -> 2703                 raise ShapeError("Matrix size mismatch: %s + %s" % (
       2704                     self.shape, other.shape))
       2705 


    ShapeError: Matrix size mismatch: (3, 3) + (3, 2)



```python
A+A
```




$\displaystyle \left[\begin{matrix}2 & -2 & -4\\0 & 6 & -2\\-2 & 0 & -4\end{matrix}\right]$




```python
A+(2*A)
```




$\displaystyle \left[\begin{matrix}3 & -3 & -6\\0 & 9 & -3\\-3 & 0 & -6\end{matrix}\right]$




```python
A*b
```




$\displaystyle \left[\begin{matrix}-3\\-13\\-10\end{matrix}\right]$




```python
b+A
```


    ---------------------------------------------------------------------------

    ShapeError                                Traceback (most recent call last)

    /tmp/ipykernel_435264/803173575.py in <module>
    ----> 1 b+A
    

    /usr/lib/python3/dist-packages/sympy/core/decorators.py in binary_op_wrapper(self, other)
        134                     if f is not None:
        135                         return f(self)
    --> 136             return func(self, other)
        137         return binary_op_wrapper
        138     return priority_decorator


    /usr/lib/python3/dist-packages/sympy/matrices/common.py in __add__(self, other)
       2701         if hasattr(other, 'shape'):
       2702             if self.shape != other.shape:
    -> 2703                 raise ShapeError("Matrix size mismatch: %s + %s" % (
       2704                     self.shape, other.shape))
       2705 


    ShapeError: Matrix size mismatch: (3, 1) + (3, 3)



```python
A**-1
```




$\displaystyle \left[\begin{matrix}\frac{6}{13} & \frac{2}{13} & - \frac{7}{13}\\- \frac{1}{13} & \frac{4}{13} & - \frac{1}{13}\\- \frac{3}{13} & - \frac{1}{13} & - \frac{3}{13}\end{matrix}\right]$




```python
B**-1
```


    ---------------------------------------------------------------------------

    NonSquareMatrixError                      Traceback (most recent call last)

    /tmp/ipykernel_435264/1626803524.py in <module>
    ----> 1 B**-1
    

    /usr/lib/python3/dist-packages/sympy/core/decorators.py in binary_op_wrapper(self, other)
        134                     if f is not None:
        135                         return f(self)
    --> 136             return func(self, other)
        137         return binary_op_wrapper
        138     return priority_decorator


    /usr/lib/python3/dist-packages/sympy/matrices/common.py in __pow__(self, exp)
       2839         """Return self**exp a scalar or symbol."""
       2840 
    -> 2841         return self.pow(exp)
       2842 
       2843 


    /usr/lib/python3/dist-packages/sympy/matrices/common.py in pow(self, exp, method)
       2864             raise TypeError('No such method')
       2865         if self.rows != self.cols:
    -> 2866             raise NonSquareMatrixError()
       2867         a = self
       2868         jordan_pow = getattr(a, '_matrix_pow_by_jordan_blocks', None)


    NonSquareMatrixError: 


## O Determinante

O determinante de uma matriz $A$ pode ser calculado pela função `A.det()`.


```python
A.det()
```




$\displaystyle -13$



## Acessar entradas e partes de matrizes

Observe nas seguintes instruções como acessar entradas e submatrizes de
matrizes.


```python
# entrada na primeira linha e coluna
# observe que esta entrada pode ser obtida não por 
# A[1,1], mas por A[0,0]
A[0,0]
```




$\displaystyle 1$




```python
# A primeira linha
A[0,:]
```




$\displaystyle \left[\begin{matrix}1 & -1 & -2\end{matrix}\right]$




```python
# A segunda coluna
A[:,1]
```




$\displaystyle \left[\begin{matrix}-1\\3\\0\end{matrix}\right]$




```python
# A submatriz com as entradas nas colunas 2 e 3 e nas linhas 2 e 3
A[[1,2],[1,2]]
```




$\displaystyle \left[\begin{matrix}3 & -1\\0 & -2\end{matrix}\right]$



## Exercício 

Agora você faz. 

Considere as seguintes duas matrizes.
$$
A = \begin{pmatrix}4&1&2&4&2&2\\ 2&2&2&3&3&4\\ 4&2&1&4&0&2\\
1&0&2&4&3&0\\ 0&4&0&4&0&0\\ 2&3&4&1&2&1 \end{pmatrix}
$$
e
$$
B=\begin{pmatrix}2&5&4&4&1&2\\ 2&4&4&2&4&3\\ 0&5&1&0&4&0\\
5&3&1&3&5&4\\ 0&4&2&1&5&5\\ 1&5&4&5&0&1 \end{pmatrix}
$$


- Decida se elas são invertíveis. 
- Se sim, caclule os inversos e os
determinantes. 
- Calcule, $AB$, $A^{-1}B$, $B^{-2}A$ e $(A+2B)^{-1}$.

Para definir as matrizes em Python, pode copiar a colar o texto abaixo

```
# matriz A
[[4, 1, 2, 4, 2, 2],
 [2, 2, 2, 3, 3, 4],
 [4, 2, 1, 4, 0, 2],
 [1, 0, 2, 4, 3, 0],
 [0, 4, 0, 4, 0, 0],
 [2, 3, 4, 1, 2, 1]]

# matriz B
[[2, 5, 4, 4, 1, 2],
 [2, 4, 4, 2, 4, 3],
 [0, 5, 1, 0, 4, 0],
 [5, 3, 1, 3, 5, 4],
 [0, 4, 2, 1, 5, 5],
 [1, 5, 4, 5, 0, 1]]
```


```python

```
