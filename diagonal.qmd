---
title: "Autovalores, autovetores, diagonalização"
number-sections: true
lang: pt-BR
---

## O  polynômio caraterístico e os autovetores

:::{#exm-eigen}
Considere a matriz 
$$
A = \begin{pmatrix} 3 & -2 &  4 & -2\\ 
                    5 &  3 & -3 & -2\\
                    5 & -2 &  2 & -2\\ 
                    5 & -2 & -3 &  3
    \end{pmatrix}
$$
Vamos calcular os seguintes atributos de $A$:

1. o polinômio caraterístico de $A$;
2. os autovalores de $A$.
:::

Primeiro, vamos definir a matrix $A$:
```{python}
from sympy import *
A = Matrix([[3, -2,  4, -2], [5,  3, -3, -2], [5, -2,  2, -2], [5, -2, -3,  3]])
A
```

O polinômio caraterístico de $A$ é definido como $\det(A-tI)$ onde $t$ é um indeterminante e $I$ é a matriz identidade $4\times 4$. O polinômio caraterístico pode ser determinado usando diretamente esta definição. Note  como o indeterminante `t` e a matriz 
identidade são definidos em `SymPy`.

```{python}
t = var('t')
I4 = eye(4)
p = det(A-t*I4)
p
```

Os autovalores de $A$ são as raízes do polinômio caraterístico `p`. As raízes de `p` podem ser econtradas usando `p.factor()`. 
```{python}
p.factor()
```
Vemos que as raízes são $5$, $4$, $-2$. 

A mesma informação, pode ser obtida por rodar `A.charpoly()`e `A.eigenvals()`. 
```{python}
A.charpoly()
```

```{python}
A.eigenvals()
```
Note que `A.eigenvals()` devolve os autovalores com as suas multiplicades. Os autovalores $3$ e $-2$ têm multiplicade $1$ 
(eles são autovalores simples), enquanto o autovalor $5$ tem multiplicidade 2 (ele é autovalor múltipla). O mesmo pode ser observado 
na fatoração do polinômio caraterístico em cima, pois $(t-5)$ aparece no segundo grau na fatoração. 

:::{#exr-eigen}
Seguindo o @exm-eigen, calcule o polinômio caraterístico e os autovalores da matriz 
$$
B = \begin{pmatrix}
-47 & -240 &  144 &  374 &  -92 \\
-56 & -325 &  214 &  520 & -124 \\
40  & 200  & -119 & -312 &   76\\
-48 & -264 &  168 & 419  & -100\\
36  &  200 & -128 & -316 &  79
\end{pmatrix}
$$
:::


## Os autovetores e diagonalização

:::{#exm-eigenvects}
Os autovetores da matriz $A$ no @exm-eigen podem ser determinados usando `A.eigenvects()`. 
```{python}
autovet = A.eigenvects()
autovet
```
Observe que obtivemos um autovetor para o autovalor $-2$, um para $3$, mas dois para $5$. Isso acontece por causa das multiplicidades dos autovalores. 

Para verificar que os vetores obtidos são de fato autovetores, podemos fazer a seguinte conta.

```{python}
autovet[0][2][0]

```

```{python}
A*autovet[0][2][0]
```

Observe que, o vetor `autovet[0][2][0]` multiplicado por `A` será multiplicado por $-2$. Ou  seja, este vetor é de fato autovetor para o autovalor $-2$. 

Agora, vamos diagonalizar a matriz $A$ criando uma matriz $P$ que contém autovetores de $A$ LI. 
```{python}
# Começamos pela matriz nula 4x4
P = zeros(4, 4)
# colocamos nas colunas de P os autovetores de A
P[:,0] = autovet[0][2][0]
P[:,1] = autovet[1][2][0]
P[:,2] = autovet[2][2][0]
P[:,3] = autovet[2][2][1]
P
```

Ora verifique, que $P^{-1}AP$ é diagonal.

```{python}
P**-1*A*P
```
Observe que as entradas diagonais de $P^{-1}AP$ são exatamente os autovalores $-2$, $3$ e $5$. Além disso, $5$ aparece $2$ vezes, pois ele teve dois autoveores LI.
:::

:::{#exr-eigenvects}
Seguindo os passos do @exm-eigenvects, 

1. ache os autovetores da matriz $B$ no @exr-eigen; 
2. ache uma matriz $P$ tal que $P^{-1}BP$ é diagonal.
:::

## Identificação das cônicas

Neste exemplo, vamos ver como identificar cônicas usando a técnica da diagonalização.

:::{#exm-conic}
Considere a cônica que também foi considerada na aula:
$$
f(x,y) = x^2+2\sqrt 3xy+3y^2+2\sqrt 3x-2y=0.
$$
Desta equação é difícil identificar se ela representa uma elipse, hipérbole, ou parábola. No entanto, nós 
podemos definir esta curva e visializá-la em Python.

```{python}
x, y = var('x y')
f = x**2+2*sqrt(3)*x*y+3*y**2+2*sqrt(3)*x-2*y
f
```

```{python}
plot_implicit(f)
```
Do desenho fica claro que esta cônica é uma parábola. 

Ora, vamos definir a matriz que corresponde à cônica e calcular os seus autovalores e autovetores.

```{python}
C = Matrix( [[1,sqrt(3)],[sqrt(3),3]])
C
```

```{python}
C.eigenvals()
```

```{python}
C.eigenvects()
```

Daqui, definimos os autovetores `v1` e `v2`. 

```{python}
v1 = C.eigenvects()[0][2][0]
v2 = C.eigenvects()[1][2][0]
v1
```

```{python}
v2
```

Note que, os autovetores `v1` e `v2` são ortogonais. Isso ocorre, porque a matriz $C$ é simétrica. Para fazer a 
diagonalização ortogonal, precisamos de autovetores ortonormais. Para isso, dividumos os autovetores com as suas normas. 

```{python}
v1 = v1/v1.norm()
v2 = v2/v2.norm()
v1
```

```{python}
v2
```

Ora, definimos a matriz $P$ que contém os autovetores ortonormais nas suas colunas. 

```{python}
P = zeros(2,2)
P[:,0] = v1
P[:,1] = v2
P
```
Veja que $P$ é matriz ortogonal; ou seja $P^tP=I$. 

```{python}
P*P.transpose()
```
Definimos as novas variáveis $x_1$ e $y_1$.

```{python}
x1, y1 = var( 'x1 y1' )
# definimos o vetor com as novas variávies
X1 = P*Matrix([[x1],[y1]])
# as novas variáveis serão as entradas de X1
x1 = X1[0]
y1 = X1[1]
x1
```

```{python}
v2
```

Agora, substituímos as novas variáveis na equação da curva e depois da simplificação, obtemos uma equação mais simples. 

```{python}
f1 = f.subs( [(x,x1), (y,y1)]).simplify()
f1
```

Desta equação, fica claro sem visualizar que a curva é uma parábola. No entanto, nós vamos visualizar para termos certeza. 

```{python}
plot_implicit(f1)
```
:::

:::{#exr-}
Seguindo os passos no @exm-conic, visualize a cônica 
$$
f(x,y)=8x^2-12xy+17y^2-8\sqrt 5x-4\sqrt 5y=0
$$
e, fazendo mudança de variáveis, simplifique a sua equação.
:::
