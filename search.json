[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exercícios computacionais para GAAL",
    "section": "",
    "text": "\\[\n\\newcommand{\\Z}{\\mathbb Z}\n\\newcommand{\\Q}{\\mathbb Q}\n\\newcommand{\\R}{\\mathbb R}\n\\newcommand{\\C}{\\mathbb C}\n\\newcommand{\\F}{\\mathbb F}\n\\newcommand{\\K}{\\mathbb K}\n\\newcommand{\\L}{\\mathbb L}\n\\newcommand{\\N}{\\mathbb N}\n\\newcommand{\\sym}[1]{\\operatorname{Sym}(#1)}\n\\newcommand{\\GLV}[1]{\\operatorname{GL}(#1)}\n\\newcommand{\\SLV}[1]{\\operatorname{SL}(#1)}\n\\newcommand{\\GL}[2]{\\operatorname{GL}(#1,#2)}\n\\newcommand{\\SL}[2]{\\operatorname{SL}(#1,#2)}\n\\newcommand{\\lxor}{\\dot\\lor}\n\\newcommand{\\cond}{\\Rightarrow}\n\\newcommand{\\bicond}{\\Leftrightarrow}\n\\newcommand{\\mdc}[2]{\\operatorname{mdc}(#1,#2)}\n\\newcommand{\\grau}[1]{\\operatorname{grau}(#1)}\n\\newcommand{\\real}[1]{\\mathfrak R(#1)}\n\\newcommand{\\imag}[1]{\\mathfrak I(#1)}\n\\newcommand{\\argz}[1]{\\mbox{arg}(#1)}\n\\DeclareMathOperator{\\sen}{sen}\n\\newcommand{\\cis}[1]{\\cos #1+i\\sen #1}\n\\newcommand{\\E}{\\mathbb E}\n\\newcommand{\\aut}[1]{\\textrm{Aut}(#1)}\n\\newcommand{\\fix}[1]{\\textrm{Fix}(#1)}\n\\newcommand{\\gal}[2]{\\textrm{Gal}(#1:#2)}\n\\newcommand{\\overbar}[1]{\\mkern 1.5mu\\overline{\\mkern-1.5mu#1\\mkern-1.5mu}\\mkern 1.5mu}\n\\newcommand{\\ul}[1]{\\underline{#1}}\n\\]",
    "crumbs": [
      "Conteúdo"
    ]
  },
  {
    "objectID": "matrices.html",
    "href": "matrices.html",
    "title": "1  Matrizes",
    "section": "",
    "text": "1.1 Como definir matrizes\nVamos usar a linguagem Python para resolver alguns problemas com matrizes.\nSejam\n\\[\nA = \\begin{pmatrix} 1 & -1 & -2 \\\\ 0 & 3 & -1 \\\\ -1 & 0 & -2\n\\end{pmatrix},\\quad\nB = \\begin{pmatrix} 2 & 2 \\\\ 0 & -2 \\\\ -2 & 2 \\end{pmatrix}\n\\] e \\[\nb=\\begin{pmatrix} 2 \\\\ -3 \\\\ 4 \\end{pmatrix}\n\\] Estas matrizes podemos definir em Python pelas seguintes instruções.\n\\(\\displaystyle \\left[\\begin{matrix}1 & -1 & -2\\\\0 & 3 & -1\\\\-1 & 0 & -2\\end{matrix}\\right]\\)\n\\(\\displaystyle \\left[\\begin{matrix}2 & 2\\\\0 & -2\\\\-2 & 2\\end{matrix}\\right]\\)\n\\(\\displaystyle \\left[\\begin{matrix}2\\\\-3\\\\4\\end{matrix}\\right]\\)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Matrizes</span>"
    ]
  },
  {
    "objectID": "matrices.html#como-definir-matrizes",
    "href": "matrices.html#como-definir-matrizes",
    "title": "1  Matrizes",
    "section": "",
    "text": "from sympy import Matrix\n\nA = Matrix( [[1,-1,-2],[0,3,-1],[-1,0,-2]])\nB = Matrix( [[2,2],[0,-2],[-2,2]] )\nb = Matrix( [[2],[-3],[4]])\nA\n\nB\n\nb",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Matrizes</span>"
    ]
  },
  {
    "objectID": "matrices.html#operações-com-matrizes",
    "href": "matrices.html#operações-com-matrizes",
    "title": "1  Matrizes",
    "section": "1.2 Operações com matrizes",
    "text": "1.2 Operações com matrizes\nAs operações entre matrizes, podem ser feitas usando os símbolos \\(+\\) (soma), \\(-\\) (diferença), \\(*\\) (produto entre matrizes, ou múltiplo escalar), e **k (potência). O inverso de uma matriz \\(A\\) pode ser calculado por teclar A**-1.\nVeja os seguintes exemplos e explique porque os sistema dá erros em alguns casos.\nA*B\n\\(\\displaystyle \\left[\\begin{matrix}6 & 0\\\\2 & -8\\\\2 & -6\\end{matrix}\\right]\\)\nB*A\n---------------------------------------------------------------------------\n\nShapeError                                Traceback (most recent call last)\n\n/tmp/ipykernel_435264/3451148411.py in &lt;module&gt;\n----&gt; 1 B*A\n\n\n/usr/lib/python3/dist-packages/sympy/core/decorators.py in binary_op_wrapper(self, other)\n    134                     if f is not None:\n    135                         return f(self)\n--&gt; 136             return func(self, other)\n    137         return binary_op_wrapper\n    138     return priority_decorator\n\n\n/usr/lib/python3/dist-packages/sympy/matrices/common.py in __mul__(self, other)\n   2761         \"\"\"\n   2762 \n-&gt; 2763         return self.multiply(other)\n   2764 \n   2765     def multiply(self, other, dotprodsimp=None):\n\n\n/usr/lib/python3/dist-packages/sympy/matrices/common.py in multiply(self, other, dotprodsimp)\n   2783              getattr(other, 'is_MatrixLike', True))):\n   2784             if self.shape[1] != other.shape[0]:\n-&gt; 2785                 raise ShapeError(\"Matrix size mismatch: %s * %s.\" % (\n   2786                     self.shape, other.shape))\n   2787 \n\n\nShapeError: Matrix size mismatch: (3, 2) * (3, 3).\nA+B\n---------------------------------------------------------------------------\n\nShapeError                                Traceback (most recent call last)\n\n/tmp/ipykernel_435264/3267467007.py in &lt;module&gt;\n----&gt; 1 A+B\n\n\n/usr/lib/python3/dist-packages/sympy/core/decorators.py in binary_op_wrapper(self, other)\n    134                     if f is not None:\n    135                         return f(self)\n--&gt; 136             return func(self, other)\n    137         return binary_op_wrapper\n    138     return priority_decorator\n\n\n/usr/lib/python3/dist-packages/sympy/matrices/common.py in __add__(self, other)\n   2701         if hasattr(other, 'shape'):\n   2702             if self.shape != other.shape:\n-&gt; 2703                 raise ShapeError(\"Matrix size mismatch: %s + %s\" % (\n   2704                     self.shape, other.shape))\n   2705 \n\n\nShapeError: Matrix size mismatch: (3, 3) + (3, 2)\nA+A\n\\(\\displaystyle \\left[\\begin{matrix}2 & -2 & -4\\\\0 & 6 & -2\\\\-2 & 0 & -4\\end{matrix}\\right]\\)\nA+(2*A)\n\\(\\displaystyle \\left[\\begin{matrix}3 & -3 & -6\\\\0 & 9 & -3\\\\-3 & 0 & -6\\end{matrix}\\right]\\)\nA*b\n\\(\\displaystyle \\left[\\begin{matrix}-3\\\\-13\\\\-10\\end{matrix}\\right]\\)\nb+A\n---------------------------------------------------------------------------\n\nShapeError                                Traceback (most recent call last)\n\n/tmp/ipykernel_435264/803173575.py in &lt;module&gt;\n----&gt; 1 b+A\n\n\n/usr/lib/python3/dist-packages/sympy/core/decorators.py in binary_op_wrapper(self, other)\n    134                     if f is not None:\n    135                         return f(self)\n--&gt; 136             return func(self, other)\n    137         return binary_op_wrapper\n    138     return priority_decorator\n\n\n/usr/lib/python3/dist-packages/sympy/matrices/common.py in __add__(self, other)\n   2701         if hasattr(other, 'shape'):\n   2702             if self.shape != other.shape:\n-&gt; 2703                 raise ShapeError(\"Matrix size mismatch: %s + %s\" % (\n   2704                     self.shape, other.shape))\n   2705 \n\n\nShapeError: Matrix size mismatch: (3, 1) + (3, 3)\nA**-1\n\\(\\displaystyle \\left[\\begin{matrix}\\frac{6}{13} & \\frac{2}{13} & - \\frac{7}{13}\\\\- \\frac{1}{13} & \\frac{4}{13} & - \\frac{1}{13}\\\\- \\frac{3}{13} & - \\frac{1}{13} & - \\frac{3}{13}\\end{matrix}\\right]\\)\nB**-1\n---------------------------------------------------------------------------\n\nNonSquareMatrixError                      Traceback (most recent call last)\n\n/tmp/ipykernel_435264/1626803524.py in &lt;module&gt;\n----&gt; 1 B**-1\n\n\n/usr/lib/python3/dist-packages/sympy/core/decorators.py in binary_op_wrapper(self, other)\n    134                     if f is not None:\n    135                         return f(self)\n--&gt; 136             return func(self, other)\n    137         return binary_op_wrapper\n    138     return priority_decorator\n\n\n/usr/lib/python3/dist-packages/sympy/matrices/common.py in __pow__(self, exp)\n   2839         \"\"\"Return self**exp a scalar or symbol.\"\"\"\n   2840 \n-&gt; 2841         return self.pow(exp)\n   2842 \n   2843 \n\n\n/usr/lib/python3/dist-packages/sympy/matrices/common.py in pow(self, exp, method)\n   2864             raise TypeError('No such method')\n   2865         if self.rows != self.cols:\n-&gt; 2866             raise NonSquareMatrixError()\n   2867         a = self\n   2868         jordan_pow = getattr(a, '_matrix_pow_by_jordan_blocks', None)\n\n\nNonSquareMatrixError:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Matrizes</span>"
    ]
  },
  {
    "objectID": "matrices.html#o-determinante",
    "href": "matrices.html#o-determinante",
    "title": "1  Matrizes",
    "section": "1.3 O Determinante",
    "text": "1.3 O Determinante\nO determinante de uma matriz \\(A\\) pode ser calculado pela função A.det().\nA.det()\n\\(\\displaystyle -13\\)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Matrizes</span>"
    ]
  },
  {
    "objectID": "matrices.html#acessar-entradas-e-partes-de-matrizes",
    "href": "matrices.html#acessar-entradas-e-partes-de-matrizes",
    "title": "1  Matrizes",
    "section": "1.4 Acessar entradas e partes de matrizes",
    "text": "1.4 Acessar entradas e partes de matrizes\nObserve nas seguintes instruções como acessar entradas e submatrizes de matrizes.\n# entrada na primeira linha e coluna\n# observe que esta entrada pode ser obtida não por \n# A[1,1], mas por A[0,0]\nA[0,0]\n\\(\\displaystyle 1\\)\n# A primeira linha\nA[0,:]\n\\(\\displaystyle \\left[\\begin{matrix}1 & -1 & -2\\end{matrix}\\right]\\)\n# A segunda coluna\nA[:,1]\n\\(\\displaystyle \\left[\\begin{matrix}-1\\\\3\\\\0\\end{matrix}\\right]\\)\n# A submatriz com as entradas nas colunas 2 e 3 e nas linhas 2 e 3\nA[[1,2],[1,2]]\n\\(\\displaystyle \\left[\\begin{matrix}3 & -1\\\\0 & -2\\end{matrix}\\right]\\)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Matrizes</span>"
    ]
  },
  {
    "objectID": "matrices.html#exercício",
    "href": "matrices.html#exercício",
    "title": "1  Matrizes",
    "section": "1.5 Exercício",
    "text": "1.5 Exercício\nAgora você faz.\nConsidere as seguintes duas matrizes. \\[\nA = \\begin{pmatrix}4&1&2&4&2&2\\\\ 2&2&2&3&3&4\\\\ 4&2&1&4&0&2\\\\\n1&0&2&4&3&0\\\\ 0&4&0&4&0&0\\\\ 2&3&4&1&2&1 \\end{pmatrix}\n\\] e \\[\nB=\\begin{pmatrix}2&5&4&4&1&2\\\\ 2&4&4&2&4&3\\\\ 0&5&1&0&4&0\\\\\n5&3&1&3&5&4\\\\ 0&4&2&1&5&5\\\\ 1&5&4&5&0&1 \\end{pmatrix}\n\\]\n\nDecida se elas são invertíveis.\nSe sim, caclule os inversos e os determinantes.\nCalcule, \\(AB\\), \\(A^{-1}B\\), \\(B^{-2}A\\) e \\((A+2B)^{-1}\\).\n\nPara definir as matrizes em Python, pode copiar a colar o texto abaixo\n# matriz A\n[[4, 1, 2, 4, 2, 2],\n [2, 2, 2, 3, 3, 4],\n [4, 2, 1, 4, 0, 2],\n [1, 0, 2, 4, 3, 0],\n [0, 4, 0, 4, 0, 0],\n [2, 3, 4, 1, 2, 1]]\n\n# matriz B\n[[2, 5, 4, 4, 1, 2],\n [2, 4, 4, 2, 4, 3],\n [0, 5, 1, 0, 4, 0],\n [5, 3, 1, 3, 5, 4],\n [0, 4, 2, 1, 5, 5],\n [1, 5, 4, 5, 0, 1]]",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Matrizes</span>"
    ]
  },
  {
    "objectID": "sistemas.html",
    "href": "sistemas.html",
    "title": "2  Sistemas lineares",
    "section": "",
    "text": "2.1 Três métodos para resolver sistemas lineares\nConsidere o seguinte sistema de equações lineares: \\[\\begin{align*}\nx + y - z &= -2\\\\\nx -y +2z &= -1\\\\\n2x - y - z &= 1\n\\end{align*}\\] Primeiro, definimos a matriz do sistema e o vetor dos valores no lado direito:\nVamos resolver o sistema usando os três métodos estudados na disciplina. Começamos pela eliminação de Gauss-Jordan.\n\\(\\displaystyle \\left[\\begin{matrix}1 & 1 & -1 & -2\\\\1 & -1 & 2 & -1\\\\2 & -1 & -1 & 1\\end{matrix}\\right]\\)\n\\(\\displaystyle \\left[\\begin{matrix}1 & 0 & 0 & -1\\\\0 & 1 & 0 & -2\\\\0 & 0 & 1 & -1\\end{matrix}\\right]\\)\nOs números que aparecem na última coluna representam a solução do sistema:\n\\(x=-1\\), \\(y=-2\\), \\(z=-1\\).\nOra, vamos usar o método da matriz inversa.\n\\(\\displaystyle \\left[\\begin{matrix}-1\\\\-2\\\\-1\\end{matrix}\\right]\\)\nFinalmente, resolveremos o problema usando o Regra do Cramer que não foi mencionado na aula, mas alguns de vocês podem ter aprendido no ensino médio.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Sistemas lineares</span>"
    ]
  },
  {
    "objectID": "sistemas.html#três-métodos-para-resolver-sistemas-lineares",
    "href": "sistemas.html#três-métodos-para-resolver-sistemas-lineares",
    "title": "2  Sistemas lineares",
    "section": "",
    "text": "from sympy import Matrix\n\n# define the matrix A\nA = Matrix([[1, 1, -1],\n             [1, -1, 2],\n             [2, -1, -1]])\n\n# define the vector b\nb = Matrix([-2, -1, 1])\n\n# primeiro, vamos criar uma cópia A0 de A. \n# Queremos usar A mais tarde\nA0 = A.copy()\n\n# Adicionamos o vetor b à matriz A0 como 4a coluna\n# observe o uso de \":\"\nA0 = A0.row_join(b)\nA0\n\n# Usando a função rref (Row Reduced Echelon Form), \n# computamos a forma escalondada de A0.\nrref_A0, _ = A0.rref()\nrref_A0\n\n\n\n\n# calculate the inverse of matrix A\nA_inv = A**-1\n\n# compute the product A_inv * b\nsolution = A_inv * b\nsolution\n\n\n# calculate the matrix A1 obtained from A by replacing the first column with b\nA1 = A.copy()\nA1[:,0] = b\n\n# calculate the matrix A2 obtained from A by replacing the second column with b\nA2 = A.copy()\nA2[:,1] = b\n\n# calculate the matrix A3 obtained from A by replacing the third column with b\nA3 = A.copy()\nA3[:,2] = b\n\n# calculate the solution by computing the determinants of A1, A2, A3 and dividing by the determinant of A\nsolution = [A1.det()/A.det(), A2.det()/A.det(), A3.det()/A.det()]\n\nsolution\n[-1, -2, -1]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Sistemas lineares</span>"
    ]
  },
  {
    "objectID": "sistemas.html#exercício",
    "href": "sistemas.html#exercício",
    "title": "2  Sistemas lineares",
    "section": "2.2 Exercício",
    "text": "2.2 Exercício\nAgora faça você.\nResolvem usando os três métodos no exemplo anterior o seguinte sistema de equações lineares: \\[\\begin{align*}\n4x_1 + x_2 + 2x_3+ 4 x_4 +2 x_5 + 2 x_6 & = -2\\\\\n2x_1 + 2x_2 + 2x_3 + 3x_4 + 3x_5 + 4x_6 & = -1\\\\\n4x_1 + 2x_2 + x_3 + 4x_4 + 2x_6 & = 1\\\\\nx_1 + 2x_3 + 4x_4 + 3x_5 & = 0\\\\\n4x_2 + 4x_4 & = 0\\\\\n2x_1 + 3x_2 + 4x_3 + x_4 + 2x_5 + x_6 & = 2\n\\end{align*}\\] Para ajudar, coloquei aqui a matriz do sistema e o vetor $b$ para serem copiados e colados na janela do Scilab.\n# matriz A\n[[4, 1, 2, 4, 2, 2],\n [2, 2, 2, 3, 3, 4],\n [4, 2, 1, 4, 0, 2],\n [1, 0, 2, 4, 3, 0],\n [0, 4, 0, 4, 0, 0],\n [2, 3, 4, 1, 2, 1]]\n\n# vetor b\n[-2, -1, 1, 0, 0, 2])",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Sistemas lineares</span>"
    ]
  },
  {
    "objectID": "interpol.html",
    "href": "interpol.html",
    "title": "3  O problema da interpolação",
    "section": "",
    "text": "3.1 Exercício\nAgora faça você mesmo.\nAche um polinômio \\(f(x)\\) de grau \\(5\\) tal que \\[\nf(0)=-1,\\ f(1)=-2,\\ f(-1)=0,\\ f(2)=-57,\\ f(-2)=79,\\ f(3)=-436.\n\\] Vizualize o polinômio encontrado.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O problema da interpolação</span>"
    ]
  },
  {
    "objectID": "geogebra.html",
    "href": "geogebra.html",
    "title": "4  Geometria 3D com GeoGebra",
    "section": "",
    "text": "\\[\n\\newcommand{\\Z}{\\mathbb Z}\n\\newcommand{\\Q}{\\mathbb Q}\n\\newcommand{\\R}{\\mathbb R}\n\\newcommand{\\C}{\\mathbb C}\n\\newcommand{\\F}{\\mathbb F}\n\\newcommand{\\K}{\\mathbb K}\n\\newcommand{\\L}{\\mathbb L}\n\\newcommand{\\N}{\\mathbb N}\n\\newcommand{\\sym}[1]{\\operatorname{Sym}(#1)}\n\\newcommand{\\GLV}[1]{\\operatorname{GL}(#1)}\n\\newcommand{\\SLV}[1]{\\operatorname{SL}(#1)}\n\\newcommand{\\GL}[2]{\\operatorname{GL}(#1,#2)}\n\\newcommand{\\SL}[2]{\\operatorname{SL}(#1,#2)}\n\\newcommand{\\lxor}{\\dot\\lor}\n\\newcommand{\\cond}{\\Rightarrow}\n\\newcommand{\\bicond}{\\Leftrightarrow}\n\\newcommand{\\mdc}[2]{\\operatorname{mdc}(#1,#2)}\n\\newcommand{\\grau}[1]{\\operatorname{grau}(#1)}\n\\newcommand{\\real}[1]{\\mathfrak R(#1)}\n\\newcommand{\\imag}[1]{\\mathfrak I(#1)}\n\\newcommand{\\argz}[1]{\\mbox{arg}(#1)}\n\\DeclareMathOperator{\\sen}{sen}\n\\newcommand{\\cis}[1]{\\cos #1+i\\sen #1}\n\\newcommand{\\E}{\\mathbb E}\n\\newcommand{\\aut}[1]{\\textrm{Aut}(#1)}\n\\newcommand{\\fix}[1]{\\textrm{Fix}(#1)}\n\\newcommand{\\gal}[2]{\\textrm{Gal}(#1:#2)}\n\\newcommand{\\overbar}[1]{\\mkern 1.5mu\\overline{\\mkern-1.5mu#1\\mkern-1.5mu}\\mkern 1.5mu}\n\\newcommand{\\ul}[1]{\\underline{#1}}\n\\]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Geometria 3D com GeoGebra</span>"
    ]
  },
  {
    "objectID": "diagonal.html",
    "href": "diagonal.html",
    "title": "5  Autovalores, autovetores, diagonalização",
    "section": "",
    "text": "5.1 Autovalores e autovetores\nPrimeiro, vamos definir a matrix \\(A\\):\nfrom sympy import *\nA = Matrix([[3, -2,  4, -2], [5,  3, -3, -2], [5, -2,  2, -2], [5, -2, -3,  3]])\nA\nMatrix([\n[3, -2,  4, -2],\n[5,  3, -3, -2],\n[5, -2,  2, -2],\n[5, -2, -3,  3]])\n\n\\(\\displaystyle \\left[\\begin{matrix}3 & -2 & 4 & -2\\\\5 & 3 & -3 & -2\\\\5 & -2 & 2 & -2\\\\5 & -2 & -3 & 3\\end{matrix}\\right]\\)\nO polinômio caraterístico de \\(A\\) é definido como \\(\\det(A-tI)\\) onde \\(t\\) é um indeterminante e \\(I\\) é a matriz identidade \\(4\\times 4\\). O polinômio caraterístico pode ser determinado usando diretamente esta definição. Note que como o indeterminante t e a matriz identidade são definidos em SymPy.\nt = var('t')\nI4 = eye(4)\np = det(A-t*I4)\np\n\n\\(\\displaystyle t^{4} - 11 t^{3} + 29 t^{2} + 35 t - 150\\)\nOs autovalores de \\(A\\) são as raízes do polinômio caraterístico p. As raízes de p podem ser econtradas usando p.factor().\np.factor()\n\n\\(\\displaystyle \\left(t - 5\\right)^{2} \\left(t - 3\\right) \\left(t + 2\\right)\\)\nVemos que as raízes são \\(5\\), 4$, \\(-2\\).\nA mesma informação, pode ser obtida por rodar A.charpoly()e A.eigenvals().\nA.charpoly()\n\n\\(\\displaystyle \\operatorname{PurePoly}{\\left( \\lambda^{4} - 11 \\lambda^{3} + 29 \\lambda^{2} + 35 \\lambda - 150, \\lambda, domain=\\mathbb{Z} \\right)}\\)\nA.eigenvals()\n\n{3: 1, -2: 1, 5: 2}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Autovalores, autovetores, diagonalização</span>"
    ]
  },
  {
    "objectID": "diagonal.html#autovalores-e-autovetores",
    "href": "diagonal.html#autovalores-e-autovetores",
    "title": "5  Autovalores, autovetores, diagonalização",
    "section": "",
    "text": "Exemplo 5.1 Considere a matriz \\[\nA = \\begin{pmatrix} 3 & -2 &  4 & -2\\\\\n                    5 &  3 & -3 & -2\\\\\n                    5 & -2 &  2 & -2\\\\\n                    5 & -2 & -3 &  3\n    \\end{pmatrix}\n\\] Vamos calcular os seguintes atributos de \\(A\\):\n\no polinômio caraterístico de \\(A\\);\nos autovalores de \\(A\\).\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercício 5.1 Seguindo o Exemplo 5.1, calcule o polinômio caraterístico e os autovalores da matriz \\[\nA = \\begin{pmatrix}\n-47 & -240 &  144 &  374 &  -92 \\\\\n-56 & -325 &  214 &  520 & -124 \\\\\n40  & 200  & -119 & -312 &   76\\\\\n-48 & -264 &  168 & 419  & -100\\\\\n36  &  200 & -128 & -316 &  79\n\\end{pmatrix}\n\\]",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Autovalores, autovetores, diagonalização</span>"
    ]
  }
]